{"name": "test_products_group", "status": "skipped", "statusDetails": {"message": "XFAIL Wait for fix bug\n\nselenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://testqastudio.me?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (708, 682). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\n  (Session info: chrome=115.0.5790.173)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00007FF6408E4A62+57106]\n\t(No symbol) [0x00007FF64085CF52]\n\t(No symbol) [0x00007FF64072E2CB]\n\t(No symbol) [0x00007FF64076D290]\n\t(No symbol) [0x00007FF64076B90D]\n\t(No symbol) [0x00007FF6407698F5]\n\t(No symbol) [0x00007FF640768B05]\n\t(No symbol) [0x00007FF64075EE2F]\n\t(No symbol) [0x00007FF6407869BA]\n\t(No symbol) [0x00007FF64075E746]\n\t(No symbol) [0x00007FF640786BD0]\n\t(No symbol) [0x00007FF64079E522]\n\t(No symbol) [0x00007FF640786793]\n\t(No symbol) [0x00007FF64075CE81]\n\t(No symbol) [0x00007FF64075E064]\n\tGetHandleVerifier [0x00007FF640B94222+2873042]\n\tGetHandleVerifier [0x00007FF640BE6590+3209792]\n\tGetHandleVerifier [0x00007FF640BDF3AF+3180639]\n\tGetHandleVerifier [0x00007FF640975F25+652245]\n\t(No symbol) [0x00007FF640868618]\n\t(No symbol) [0x00007FF6408647C4]\n\t(No symbol) [0x00007FF6408648BC]\n\t(No symbol) [0x00007FF640854C33]\n\tBaseThreadInitThunk [0x00007FFA920C26AD+29]\n\tRtlUserThreadStart [0x00007FFA9308AA68+40]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"096d245c282f931acf7605f1dea1c3ce\")>\n\n    @pytest.mark.xfail(reason=\"Wait for fix bug\")\n    def test_products_group(browser):\n        \"\"\"\n        Test case TC-2\n        \"\"\"\n        expected_menu = [\n            (\"Все\", \"\", \"[class='tab-all active']\"),\n            (\"Бестселлеры\", \"/?products_group=best_sellers\", \"[class='tab-best_sellers ']\"),\n            (\"Горячие товары\", \"/?products_group=featured\", \"[class='tab-featured ']\"),\n            (\"Новые товары\", \"/?products_group=new\", \"[class='tab-new ']\"),\n            (\"Распродажа товаров\", \"/?products_group=sale\", \"[class='tab-sale ']\")\n        ]\n    \n        browser.get(URL)\n        menu_element = \"[class='catalog-toolbar-tabs__content'] a\"\n        elements = browser.find_elements(by=By.CSS_SELECTOR, value=menu_element)\n        assert len(elements) == len(expected_menu), \"Unexpected number of products group\"\n    \n        for item in expected_menu:\n            element = browser.find_element(by=By.CSS_SELECTOR, value=item[2])\n>           element.click()\n\ntests\\test_shop.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000245A6569490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF640854C33]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA920C26AD+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFA9308AA68+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://testqastudio.me?products_group=sale\" class=\"tab-sale \">...</a> is not clickable at point (708, 682). Other element would receive the click: <div class=\"catalog-toolbar-tabs__content\">...</div>\nE         (Session info: chrome=115.0.5790.173)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00007FF6408E4A62+57106]\nE       \t(No symbol) [0x00007FF64085CF52]\nE       \t(No symbol) [0x00007FF64072E2CB]\nE       \t(No symbol) [0x00007FF64076D290]\nE       \t(No symbol) [0x00007FF64076B90D]\nE       \t(No symbol) [0x00007FF6407698F5]\nE       \t(No symbol) [0x00007FF640768B05]\nE       \t(No symbol) [0x00007FF64075EE2F]\nE       \t(No symbol) [0x00007FF6407869BA]\nE       \t(No symbol) [0x00007FF64075E746]\nE       \t(No symbol) [0x00007FF640786BD0]\nE       \t(No symbol) [0x00007FF64079E522]\nE       \t(No symbol) [0x00007FF640786793]\nE       \t(No symbol) [0x00007FF64075CE81]\nE       \t(No symbol) [0x00007FF64075E064]\nE       \tGetHandleVerifier [0x00007FF640B94222+2873042]\nE       \tGetHandleVerifier [0x00007FF640BE6590+3209792]\nE       \tGetHandleVerifier [0x00007FF640BDF3AF+3180639]\nE       \tGetHandleVerifier [0x00007FF640975F25+652245]\nE       \t(No symbol) [0x00007FF640868618]\nE       \t(No symbol) [0x00007FF6408647C4]\nE       \t(No symbol) [0x00007FF6408648BC]\nE       \t(No symbol) [0x00007FF640854C33]\nE       \tBaseThreadInitThunk [0x00007FFA920C26AD+29]\nE       \tRtlUserThreadStart [0x00007FFA9308AA68+40]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "\n    Test case TC-2\n    ", "start": 1692517843452, "stop": 1692517852217, "uuid": "f2944f13-2a7f-41e0-884e-ddc01a11dd64", "historyId": "4fdd6adba16e950b161eae73ef4ccb14", "testCaseId": "4fdd6adba16e950b161eae73ef4ccb14", "fullName": "tests.test_shop#test_products_group", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(reason='Wait for fix bug')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_shop"}, {"name": "host", "value": "DESKTOP-BHKSCDD"}, {"name": "thread", "value": "4400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_shop"}]}